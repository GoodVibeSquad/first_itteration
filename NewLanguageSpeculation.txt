{

// We set up an input layer for MNIST digits, each of size 28x28 pixels.
// This means that we need to know the pixel width and height of the images we are inserting.
// We assume that the inserted images will be flattened before they are input into the network.
// Therefore, each row will have 28*28 pixels, and each row will contain the flattened data for a single image.

// Example of a layer with one image (28*28 columns, 1 row):
Layer inputOneImg = new Layer(28*28);

// Example of a layer with multiple images (6 images, 28*28 columns, and 6 rows):
int amountOfImages = 6;
Layer input = new Layer(28*28, amountOfImages);

// The hidden layer in our neural network contains a specified number of neurons.
// Each row in the hidden layer corresponds to a single neuron.
// The second parameter represents the number of images we wish to process (this corresponds to the batch size).
// If no second parameter is provided, it is assumed to process just one image.
// Here, we use the variable `amountOfImages` to specify that we wish to process 6 images using 50 neurons.
int neuronAmount = 50;
Layer hidden = new Layer(50, amountOfImages);  // 50 neurons, processing 6 images in a batch

// The output layer corresponds to the number of classifications we want the network to make.
// For MNIST, there are 10 possible classes (digits 0-9), so the output layer will have 10 neurons.
// The output layer will also produce a prediction for each image in the in this case, 6 images.
int classifications = 10;  // Number of output classes (0-9 for MNIST)
int predictions = amountOfImages;  // Number of images being processed (predictions per image)
Layer output = new Layer(classifications, predictions);  // 10 neurons, 6 images (batch size)



NeuralNetwork nn = new NeuralNetwork(input, hidden, output);

string data = "c:\Neuro\imgs";
string dataType = ".img";
string epochs = 5;
double learningRate = 0.01;
string trueAnswers = "c:\Neuro\answers.txt";
int batchSize = 6;

nn.train(data, dataType, epochs, learningRate, trueAnswers,  batchSize);
nn.saveModel("c:\Neuro\network", "Neuro1");

NeuralNetwork nn = NeuralNetwork.loadModel("c:\Neuro\network\Neuro1.txt");

string data = "c:\Neuro\imgs2";
string dataType = ".img";
nn.predict(data, dataType);

}